//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlowSynx.Core {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FlowSynx.Core.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given config name {0} is already exist!.
        /// </summary>
        internal static string AddConfigHandlerItemIsAlreadyExist {
            get {
                return ResourceManager.GetString("AddConfigHandlerItemIsAlreadyExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configuration was added successfully..
        /// </summary>
        internal static string AddConfigHandlerSuccessfullyAdded {
            get {
                return ResourceManager.GetString("AddConfigHandlerSuccessfullyAdded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name should be not empty..
        /// </summary>
        internal static string AddConfigValidatorNameValueMustNotNullOrEmptyMessage {
            get {
                return ResourceManager.GetString("AddConfigValidatorNameValueMustNotNullOrEmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entered type is not valid or not exist!.
        /// </summary>
        internal static string AddConfigValidatorTypeValueIsNotValid {
            get {
                return ResourceManager.GetString("AddConfigValidatorTypeValueIsNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type should be not empty..
        /// </summary>
        internal static string AddConfigValidatorTypeValueMustNotNullOrEmptyMessage {
            get {
                return ResourceManager.GetString("AddConfigValidatorTypeValueMustNotNullOrEmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified destination-path is of a different type than the source-path..
        /// </summary>
        internal static string CopyDestinationPathIsDifferentThanSourcePath {
            get {
                return ResourceManager.GetString("CopyDestinationPathIsDifferentThanSourcePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The copy was done successfully..
        /// </summary>
        internal static string CopyHandlerSuccessfullyCopy {
            get {
                return ResourceManager.GetString("CopyHandlerSuccessfullyCopy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Destination path should be not empty..
        /// </summary>
        internal static string CopyValidatorDestinationPathValueMustNotNullOrEmptyMessage {
            get {
                return ResourceManager.GetString("CopyValidatorDestinationPathValueMustNotNullOrEmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source path should be not empty..
        /// </summary>
        internal static string CopyValidatorSourcePathValueMustNotNullOrEmptyMessage {
            get {
                return ResourceManager.GetString("CopyValidatorSourcePathValueMustNotNullOrEmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given config name is deleted..
        /// </summary>
        internal static string DeleteConfigHandlerSuccessfullyDeleted {
            get {
                return ResourceManager.GetString("DeleteConfigHandlerSuccessfullyDeleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name should be not empty..
        /// </summary>
        internal static string DeleteConfigValidatorNameValueMustNotNullOrEmptyMessage {
            get {
                return ResourceManager.GetString("DeleteConfigValidatorNameValueMustNotNullOrEmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file was deleted successfully..
        /// </summary>
        internal static string DeleteFileHandlerSuccessfullyDeleted {
            get {
                return ResourceManager.GetString("DeleteFileHandlerSuccessfullyDeleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file(s) were deleted successfully..
        /// </summary>
        internal static string DeleteHandlerSuccessfullyDeleted {
            get {
                return ResourceManager.GetString("DeleteHandlerSuccessfullyDeleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path should be not empty..
        /// </summary>
        internal static string DeleteValidatorPathValueMustNotNullOrEmptyMessage {
            get {
                return ResourceManager.GetString("DeleteValidatorPathValueMustNotNullOrEmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value from ({0}) could not be extracted!.
        /// </summary>
        internal static string FileSystemDateParserCannotExtractValue {
            get {
                return ResourceManager.GetString("FileSystemDateParserCannotExtractValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given datetime is not valid!.
        /// </summary>
        internal static string FileSystemDateParserInvalidInput {
            get {
                return ResourceManager.GetString("FileSystemDateParserInvalidInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; FileSystem not found!.
        /// </summary>
        internal static string FileSystemRemotePathParserFileSystemNotFoumd {
            get {
                return ResourceManager.GetString("FileSystemRemotePathParserFileSystemNotFoumd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value from ({0}) could not be extracted!.
        /// </summary>
        internal static string FileSystemSizeParserCannotExtractValue {
            get {
                return ResourceManager.GetString("FileSystemSizeParserCannotExtractValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given size is not valid!.
        /// </summary>
        internal static string FileSystemSizeParserInvalidInput {
            get {
                return ResourceManager.GetString("FileSystemSizeParserInvalidInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Property. Order By Format: Property, Property2 ASC, Property2 DESC.
        /// </summary>
        internal static string FileSystemSortParserInvalidProperty {
            get {
                return ResourceManager.GetString("FileSystemSortParserInvalidProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Property. Given sorting property name &apos;{0}&apos; is not valid..
        /// </summary>
        internal static string FileSystemSortParserInvalidPropertyName {
            get {
                return ResourceManager.GetString("FileSystemSortParserInvalidPropertyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sort direction &apos;{0}&apos; for &apos;{1}&apos; is not valid..
        /// </summary>
        internal static string FileSystemSortParserInvalidSortDirection {
            get {
                return ResourceManager.GetString("FileSystemSortParserInvalidSortDirection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Sorting string &apos;{0}&apos;. Order By Format: Property, Property2 ASC, Property2 DESC.
        /// </summary>
        internal static string FileSystemSortParserInvalidSortingTerm {
            get {
                return ResourceManager.GetString("FileSystemSortParserInvalidSortingTerm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more validation failures have occurred..
        /// </summary>
        internal static string InputValidationExceptionBaseMessage {
            get {
                return ResourceManager.GetString("InputValidationExceptionBaseMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Kind value must be [ File | Directory | FileAndDirectory ]. By default it is FileAndDirectory..
        /// </summary>
        internal static string ListValidatorKindValueMustBeValidMessage {
            get {
                return ResourceManager.GetString("ListValidatorKindValueMustBeValidMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {PropertyName} should be not empty..
        /// </summary>
        internal static string ListValidatorPathValueMustNotNullOrEmptyMessage {
            get {
                return ResourceManager.GetString("ListValidatorPathValueMustNotNullOrEmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Level value must be [ Dbug | Info | Warn | Fail | Crit ]. By default it is Info..
        /// </summary>
        internal static string LogsValidatorKindValueMustBeValidMessage {
            get {
                return ResourceManager.GetString("LogsValidatorKindValueMustBeValidMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory was created successfully..
        /// </summary>
        internal static string MakeDirectoryHandlerSuccessfullyDeleted {
            get {
                return ResourceManager.GetString("MakeDirectoryHandlerSuccessfullyDeleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path should be not empty..
        /// </summary>
        internal static string MakeDirectoryValidatorPathValueMustNotNullOrEmptyMessage {
            get {
                return ResourceManager.GetString("MakeDirectoryValidatorPathValueMustNotNullOrEmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified destination-path is of a different type than the source-path..
        /// </summary>
        internal static string MoveDestinationPathIsDifferentThanSourcePath {
            get {
                return ResourceManager.GetString("MoveDestinationPathIsDifferentThanSourcePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The move was done successfully..
        /// </summary>
        internal static string MoveHandlerSuccessfullyMoved {
            get {
                return ResourceManager.GetString("MoveHandlerSuccessfullyMoved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source and destination path are identical and overlap..
        /// </summary>
        internal static string MoveTheSourceAndDestinationPathAreIdenticalAndOverlap {
            get {
                return ResourceManager.GetString("MoveTheSourceAndDestinationPathAreIdenticalAndOverlap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Destination path should be not empty..
        /// </summary>
        internal static string MoveValidatorDestinationPathValueMustNotNullOrEmptyMessage {
            get {
                return ResourceManager.GetString("MoveValidatorDestinationPathValueMustNotNullOrEmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source path should be not empty..
        /// </summary>
        internal static string MoveValidatorSourcePathValueMustNotNullOrEmptyMessage {
            get {
                return ResourceManager.GetString("MoveValidatorSourcePathValueMustNotNullOrEmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given type {0} is not valid!.
        /// </summary>
        internal static string NamespaceParserInvalidType {
            get {
                return ResourceManager.GetString("NamespaceParserInvalidType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in initializing &apos;{0}&apos; plugin instance!.
        /// </summary>
        internal static string PlugininItializingInstanceErrorMessage {
            get {
                return ResourceManager.GetString("PlugininItializingInstanceErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespace value must be [ Storage| Messaging | KeyValue ]. By default it is Storage..
        /// </summary>
        internal static string PluginValidatorPluginNamespaceValueMustBeValidMessage {
            get {
                return ResourceManager.GetString("PluginValidatorPluginNamespaceValueMustBeValidMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory was purged successfully..
        /// </summary>
        internal static string PurgeDirectoryHandlerSuccessfullyPurged {
            get {
                return ResourceManager.GetString("PurgeDirectoryHandlerSuccessfullyPurged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path should be not empty..
        /// </summary>
        internal static string PurgeDirectoryValidatorPathValueMustNotNullOrEmptyMessage {
            get {
                return ResourceManager.GetString("PurgeDirectoryValidatorPathValueMustNotNullOrEmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {PropertyName} should be not empty..
        /// </summary>
        internal static string ReadValidatorPathValueMustNotNullOrEmptyMessage {
            get {
                return ResourceManager.GetString("ReadValidatorPathValueMustNotNullOrEmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Kind value must be [ File | Directory | FileAndDirectory ]. By default it is FileAndDirectory..
        /// </summary>
        internal static string SizeValidatorKindValueMustBeValidMessage {
            get {
                return ResourceManager.GetString("SizeValidatorKindValueMustBeValidMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {PropertyName} should be not empty..
        /// </summary>
        internal static string SizeValidatorPathValueMustNotNullOrEmptyMessage {
            get {
                return ResourceManager.GetString("SizeValidatorPathValueMustNotNullOrEmptyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specification(s) [{0}] are required and must have value..
        /// </summary>
        internal static string SpecificationsMustHaveValue {
            get {
                return ResourceManager.GetString("SpecificationsMustHaveValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of &apos;{0}&apos; in specifications is required and must have a value..
        /// </summary>
        internal static string SpecificationsRequiredMemberMustHaveValue {
            get {
                return ResourceManager.GetString("SpecificationsRequiredMemberMustHaveValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The selected plugin type &apos;{0}&apos; is not valid storage plugin type..
        /// </summary>
        internal static string StorageNormsParserInvalidStorageType {
            get {
                return ResourceManager.GetString("StorageNormsParserInvalidStorageType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file was writen successfully..
        /// </summary>
        internal static string WriteHandlerSuccessfullyWriten {
            get {
                return ResourceManager.GetString("WriteHandlerSuccessfullyWriten", resourceCulture);
            }
        }
    }
}
